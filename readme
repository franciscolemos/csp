The $rotation has the new created flights

Export the solution;
Calculate the cost;

Find the fixed flights; domains.fixed includes maint. however it will be tested in feas. functions
The domains are solely based on airport dep. and arr. capacity

Add the cancellation to the ranges (-1, 0, 60, 120, 180, ..., 900, 960)
Initialize the tupple of lists
np.array(np.meshgrid([1, 2, 3], [4, 5], [6, 7])).T.reshape(-1,3)
Create the matrix with all the possible rotations (combinatorial explosion)

Develop functions to measure the combinations, time;
Compare performace with itertools;

Debug ranges (array([0, 2, 3, 4, 5, 6], dtype=int64),)
Mitigate the combinatorial explosion starting singleton propagation;
Maintain no. of combinations lt 3*10**6

solution [array[], dtype=[('aircraft', '<U15'), ('family', '<U15'), ('flight', '<U13'),
('origin', '<U3'), ('depInt', '<i2'), ('altDepInt', '<i2'), ('destination', '<U3'),
('arrInt', '<i2'), ('altArrInt', '<i2'), ('previous', '<U5'), ('tt', '<i2'), ('cancelFlight', 'u1')])]
Create aircraft list with solution;
Create aircraft list without solution and iterate;
Update airport capacity to constraint ranges;

remove random aircraftList
remove transpcom from aircraft dict.
debug airport capacity
Test the feasibility of the recovery
Save the feasible solution and the cost

refactor read itineraries

debug airport capacity (changed dtype in altAirport)

create comboRotation
create recoveredRotation
verify recoveredRotation feasibility (check if airp. cap necessary to be verified)
dynamic no. of combinations
save feasible recoveredRotation

debuged rotation solution tuples

Traceability header
Find the aircraft w/ previous flights
Refactor ARP into actions

Debug movingFlights (done)
Verify airport capacity (check why it is infeasible)
Feasibility: if previous flight is cancelled then the next one must also be cancelled (done)
B08 debug Disrupted flight 1102 cancelled (they are not showing in the solution, outside RTW)(done)
B08 debug Fixed flight 61 cancelled (they are not showing in the solution) (done)
B08 debug Arrival flight 4986 on 2008-Mar-02 after the end of recovery period (done)

Add transpcom to the solution
B08 Disrupted flight 2866 cancelled A318#33
Add maint. feasibility

Refactor solution because of infeasible solutions: fixed flights in infeasible airp. time slots

Derive function to sort the feasible solutions using pandas

define heuristic to retrieve best solution (Simmulated annealing for _noCombos)
noZeros = noCombos
create numpy array dtype(np.int8, np.u1)

B08 debug Maintenance position not respected for aircraft A319#20


Export the solution with the feasible rotations;
get the index of the current solution;
Cancel the itineraries that infeasible;
Calculate the cost;



When a rotation is found infeasible it becomes necessary to reconstruct it from the flight where it breaks by inserting each flight and checking their feasibility;
If a table is to be constructed with all possible combinations this could create a combinatorial explosion;
It does becomes necessary to use the Erdos Reniy method to generate the graph;
The probability pf generating a node should vary according to the scenario (flight: delay, cancellation; aircraft: breakdown; airport capacity: shortage)
Generate the probability function for the Erdos-Renyi graph generator
Generate the graph using the Erdos-Renyi method